    pipeline {
        agent any
        parameters {
            string(name: 'repoUrl', defaultValue: 'git@gitee.com:JornahLee/blog-jl.git', description: 'repo url')
            //repoBranch参数后续替换成git parameter不再依赖手工输入,JENKINS-46451【git parameters目前还不支持pipeline】
            string(name: 'repoBranch', defaultValue: 'master', description: 'git branch name')
            string(name: 'dockerRegistry', defaultValue: 'https://docker.io', description: 'docker registry')
            string(name: 'imageName', defaultValue: 'blog-api', description: 'image name')
            string(name: 'dockerRegistryCredentialId', defaultValue: 'cr_docker_io', description: 'docker Registry Credential Id')
//            string(name: 'deployServerHost', defaultValue: 'az.499801.xyz', description: 'deployServerHost')
//            string(name: 'deployServerCredentialId', defaultValue: 'az-jornah', description: 'deployServerCredentialId')

        }

        triggers {
            pollSCM('H/2 * * * *')
        }
        stages {
            stage('fetch code') {
                steps {
                    println("this is branch name : ${params.repoBranch}")
                    git branch: params.repoBranch, credentialsId: 'jenkins', url: params.repoUrl
                    script {
                        env.imageTag = sh(script: 'git rev-parse --short HEAD', returnStdout: true).trim()
                    }
                }
            }
//            stage('mvn build') {
//                steps {
//                    sh 'mvn clean package'
//                }
//            }

            stage('push docker image') {
                steps {
                    script {
                        echo 'docker build'
                        docker.withRegistry(params.dockerRegistry, params.dockerRegistryCredentialId) {
                            def image = docker.build(params.imageName)
                            image.push(imageTag)
                            image.push()
                        }

                    }
                }
            }
        }
    }
